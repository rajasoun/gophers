package model

func MockReadJsonFile() string {
	myJson :=
		`[{"title":"Everyday Git in twenty commands or so","tip":"git help everyday"},{"title":"Show helpful guides that come with Git","tip":"git help -g"},{"title":"Search change by content","tip":"git log -S'<a term in the source>'"},{"title":"Show changes over time for specific file","tip":"git log -p <file_name>"},{"title":"Remove sensitive data from history, after a push","tip":"git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch <path-to-your-file>' --prune-empty --tag-name-filter cat -- --all && git push origin --force --all"},{"title":"Sync with remote, overwrite local changes","tip":"git fetch origin && git reset --hard origin/master && git clean -f -d"},{"title":"List of all files till a commit","tip":"git ls-tree --name-only -r <commit-ish>"},{"title":"Git reset first commit","tip":"git update-ref -d HEAD"},{"title":"Reset: preserve uncommitted local changes","tip":"git reset --keep <commit>"},{"title":"List all the conflicted files","tip":"git diff --name-only --diff-filter=U"},{"title":"List of all files changed in a commit","tip":"git diff-tree --no-commit-id --name-only -r <commit-ish>"},{"title":"Unstaged changes since last commit","tip":"git diff"},{"title":"Changes staged for commit","tip":"git diff --cached","alternatives":["git diff --staged"]},{"title":"Show both staged and unstaged changes","tip":"git diff HEAD"},{"title":"List all branches that are already merged into master","tip":"git branch --merged master"},{"title":"Quickly switch to the previous branch","tip":"git checkout -","alternatives":["git checkout @{-1}"]},{"title":"Remove branches that have already been merged with master","tip":"git branch --merged master | grep -v '^\\*' | xargs -n 1 git branch -d","alternatives":["git branch --merged master | grep -v '^\\*\\|  master' | xargs -n 1 git branch -d # will not delete master if master is not checked out"]},{"title":"List all branches and their upstreams, as well as last commit on branch","tip":"git branch -vv"},{"title":"Track upstream branch","tip":"git branch -u origin/mybranch"},{"title":"Delete local branch","tip":"git branch -d <local_branchname>"},{"title":"Delete remote branch","tip":"git push origin --delete <remote_branchname>","alternatives":["git push origin :<remote_branchname>","git branch -dr <remote/branch>"]},{"title":"Create local tag","tip":"git tag <tag-name>"},{"title":"Delete local tag","tip":"git tag -d <tag-name>"},{"title":"Delete remote tag","tip":"git push origin :refs/tags/<tag-name>"},{"title":"Undo local changes with the last content in head","tip":"git checkout -- <file_name>"},{"title":"Revert: Undo a commit by creating a new commit","tip":"git revert <commit-ish>"},{"title":"Reset: Discard commits, advised for private branch","tip":"git reset <commit-ish>"},{"title":"Reword the previous commit message","tip":"git commit -v --amend"},{"title":"See commit history for just the current branch","tip":"git cherry -v master"},{"title":"Amend author.","tip":"git commit --amend --author='Author Name <email@address.com>'"},{"title":"Reset author, after author has been changed in the global config.","tip":"git commit --amend --reset-author --no-edit"},{"title":"Changing a remote's URL","tip":"git remote set-url origin <URL>"},{"title":"Get list of all remote references","tip":"git remote","alternatives":["git remote show"]},{"title":"Get list of all local and remote branches","tip":"git branch -a"},{"title":"Get only remote branches","tip":"git branch -r"},{"title":"Stage parts of a changed file, instead of the entire file","tip":"git add -p"},{"title":"Get git bash completion","tip":"curl -L http://git.io/vfhol > ~/.git-completion.bash && echo '[ -f ~/.git-completion.bash ] && . ~/.git-completion.bash' >> ~/.bashrc"},{"title":"What changed since two weeks?","tip":"git log --no-merges --raw --since='2 weeks ago'","alternatives":["git whatchanged --since='2 weeks ago'"]},{"title":"See all commits made since forking from master","tip":"git log --no-merges --stat --reverse master.."},{"title":"Pick commits across branches using cherry-pick","tip":"git checkout <branch-name> && git cherry-pick <commit-ish>"},{"title":"Find out branches containing commit-hash","tip":"git branch -a --contains <commit-ish>","alternatives":["git branch --contains <commit-ish>"]},{"title":"Git Aliases","tip":"git config --global alias.<handle> <command> \ngit config --global alias.st status"},{"title":"Saving current state of tracked files without commiting","tip":"git stash","alternatives":["git stash push"]},{"title":"Saving current state of unstaged changes to tracked files","tip":"git stash -k","alternatives":["git stash --keep-index","git stash push --keep-index"]},{"title":"Saving current state including untracked files","tip":"git stash -u","alternatives":["git stash push -u","git stash push --include-untracked"]},{"title":"Saving current state with message","tip":"git stash push -m <message>","alternatives":["git stash push --message <message>"]},{"title":"Saving current state of all files (ignored, untracked, and tracked)","tip":"git stash -a","alternatives":["git stash --all","git stash push --all"]},{"title":"Show list of all saved stashes","tip":"git stash list"},{"title":"Show the contents of any stash in patch form","tip":"git stash show -p <stash@{n}>"},{"title":"Apply any stash without deleting from the stashed list","tip":"git stash apply <stash@{n}>"},{"title":"Apply last stashed state and delete it from stashed list","tip":"git stash pop","alternatives":["git stash apply stash@{0} && git stash drop stash@{0}"]},{"title":"Delete all stored stashes","tip":"git stash clear","alternatives":["git stash drop <stash@{n}>"]},{"title":"Grab a single file from a stash","tip":"git checkout <stash@{n}> -- <file_path>","alternatives":["git checkout stash@{0} -- <file_path>"]},{"title":"Show all tracked files","tip":"git ls-files -t"},{"title":"Show all untracked files","tip":"git ls-files --others"},{"title":"Show all ignored files","tip":"git ls-files --others -i --exclude-standard"},{"title":"Create new working tree from a repository (git 2.5)","tip":"git worktree add -b <branch-name> <path> <start-point>"},{"title":"Create new working tree from HEAD state","tip":"git worktree add --detach <path> HEAD"},{"title":"Untrack files without deleting","tip":"git rm --cached <file_path>","alternatives":["git rm --cached -r <directory_path>"]},{"title":"Before deleting untracked files/directory, do a dry run to get the list of these files/directories","tip":"git clean -n"},{"title":"Forcefully remove untracked files","tip":"git clean -f"},{"title":"Forcefully remove untracked directory","tip":"git clean -f -d"},{"title":"Update all the submodules","tip":"git submodule foreach git pull","alternatives":["git submodule update --init --recursive","git submodule update --remote"]},{"title":"Show all commits in the current branch yet to be merged to master","tip":"git cherry -v master","alternatives":["git cherry -v master <branch-to-be-merged>"]},{"title":"Rename a branch","tip":"git branch -m <new-branch-name>","alternatives":["git branch -m [<old-branch-name>] <new-branch-name>"]},{"title":"Rebases 'feature' to 'master' and merges it in to master ","tip":"git rebase master feature && git checkout master && git merge -"},{"title":"Archive the master branch","tip":"git archive master --format=zip --output=master.zip"},{"title":"Modify previous commit without modifying the commit message","tip":"git add --all && git commit --amend --no-edit"},{"title":"Prunes references to remove branches that have been deleted in the remote.","tip":"git fetch -p","alternatives":["git remote prune origin"]},{"title":"Delete local branches that has been squash and merged in the remote.","tip":"git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -D"},{"title":"Retrieve the commit hash of the initial revision.","tip":" git rev-list --reverse HEAD | head -1","alternatives":["git rev-list --max-parents=0 HEAD","git log --pretty=oneline | tail -1 | cut -c 1-40","git log --pretty=oneline --reverse | head -1 | cut -c 1-40"]},{"title":"Visualize the version tree.","tip":"git log --pretty=oneline --graph --decorate --all","alternatives":["gitk --all","git log --graph --pretty=format:'%C(auto) %h | %s | %an | %ar%d'"]},{"title":"Visualize the tree including commits that are only referenced from reflogs","tip":"git log --graph --decorate --oneline $(git rev-list --walk-reflogs --all)"},{"title":"Deploying git tracked subfolder to gh-pages","tip":"git subtree push --prefix subfolder_name origin gh-pages","alternatives":"git subtree push --prefix subfolder_name origin branch_name"},{"title":"Adding a project to repo using subtree","tip":"git subtree add --prefix=<directory_name>/<project_name> --squash git@github.com:<username>/<project_name>.git master"},{"title":"Get latest changes in your repo for a linked project using subtree","tip":"git subtree pull --prefix=<directory_name>/<project_name> --squash git@github.com:<username>/<project_name>.git master"},{"title":"Export a branch with history to a file.","tip":"git bundle create <file> <branch-name>"},{"title":"Import from a bundle","tip":"git clone repo.bundle <repo-dir> -b <branch-name>"},{"title":"Get the name of current branch.","tip":"git rev-parse --abbrev-ref HEAD"},{"title":"Ignore one file on commit (e.g. Changelog).","tip":"git update-index --assume-unchanged Changelog; git commit -a; git update-index --no-assume-unchanged Changelog"},{"title":"Stash changes before rebasing","tip":"git rebase --autostash"},{"title":"Fetch pull request by ID to a local branch","tip":"git fetch origin pull/<id>/head:<branch-name>","alternatives":["git pull origin pull/<id>/head:<branch-name>"]},{"title":"Show the most recent tag on the current branch.","tip":"git describe --tags --abbrev=0"},{"title":"Show inline word diff.","tip":"git diff --word-diff"},{"title":"Show changes using common diff tools.","tip":"git difftool [-t <tool>] <commit1> <commit2> <path>"},{"title":"Don’t consider changes for tracked file.","tip":"git update-index --assume-unchanged <file_name>"},{"title":"Undo assume-unchanged.","tip":"git update-index --no-assume-unchanged <file_name>"},{"title":"Clean the files from .gitignore.","tip":"git clean -X -f"},{"title":"Restore deleted file.","tip":"git checkout <deleting_commit> -- <file_path>"},{"title":"Restore file to a specific commit-hash","tip":"git checkout <commit-ish> -- <file_path>"},{"title":"Always rebase instead of merge on pull.","tip":"git config --global pull.rebase true","alternatives":["#git < 1.7.9\ngit config --global branch.autosetuprebase always"]},{"title":"List all the alias and configs.","tip":"git config --list"},{"title":"Make git case sensitive.","tip":"git config --global core.ignorecase false"},{"title":"Add custom editors.","tip":"git config --global core.editor '$EDITOR'"},{"title":"Auto correct typos.","tip":"git config --global help.autocorrect 1"},{"title":"Check if the change was a part of a release.","tip":"git name-rev --name-only <SHA-1>"},{"title":"Dry run. (any command that supports dry-run flag should do.)","tip":"git clean -fd --dry-run"},{"title":"Marks your commit as a fix of a previous commit.","tip":"git commit --fixup <SHA-1>"},{"title":"Squash fixup commits normal commits.","tip":"git rebase -i --autosquash"},{"title":"Skip staging area during commit.","tip":"git commit --only <file_path>"},{"title":"Interactive staging.","tip":"git add -i"},{"title":"List ignored files.","tip":"git check-ignore *"},{"title":"Status of ignored files.","tip":"git status --ignored"},{"title":"Commits in Branch1 that are not in Branch2","tip":"git log Branch1 ^Branch2"},{"title":"List n last commits","tip":"git log -<n>","alternatives":["git log -n <n>"]},{"title":"Reuse recorded resolution, record and reuse previous conflicts resolutions.","tip":"git config --global rerere.enabled 1"},{"title":"Open all conflicted files in an editor.","tip":"git diff --name-only | uniq | xargs $EDITOR"},{"title":"Count unpacked number of objects and their disk consumption.","tip":"git count-objects --human-readable"},{"title":"Prune all unreachable objects from the object database.","tip":"git gc --prune=now --aggressive"},{"title":"Instantly browse your working repository in gitweb.","tip":"git instaweb [--local] [--httpd=<httpd>] [--port=<port>] [--browser=<browser>]"},{"title":"View the GPG signatures in the commit log","tip":"git log --show-signature"},{"title":"Remove entry in the global config.","tip":"git config --global --unset <entry-name>"},{"title":"Checkout a new branch without any history","tip":"git checkout --orphan <branch_name>"},{"title":"Extract file from another branch.","tip":"git show <branch_name>:<file_name>"},{"title":"List only the root and merge commits.","tip":"git log --first-parent"},{"title":"Change previous two commits with an interactive rebase.","tip":"git rebase --interactive HEAD~2"},{"title":"List all branch is WIP","tip":"git checkout master && git branch --no-merged"},{"title":"Find guilty with binary search","tip":"git bisect start                    # Search start \ngit bisect bad                      # Set point to bad commit \ngit bisect good v2.6.13-rc2         # Set point to good commit|tag \ngit bisect bad                      # Say current state is bad \ngit bisect good                     # Say current state is good \ngit bisect reset                    # Finish search \n"},{"title":"Bypass pre-commit and commit-msg githooks","tip":"git commit --no-verify"},{"title":"List commits and changes to a specific file (even through renaming)","tip":"git log --follow -p -- <file_path>"},{"title":"Clone a single branch","tip":"git clone -b <branch-name> --single-branch https://github.com/user/repo.git"},{"title":"Create and switch new branch","tip":"git checkout -b <branch-name>","alternatives":["git branch <branch-name> && git checkout <branch-name>","git switch -c <branch-name>"]},{"title":"Ignore file mode changes on commits","tip":"git config core.fileMode false"},{"title":"Turn off git colored terminal output","tip":"git config --global color.ui false"},{"title":"Specific color settings","tip":"git config --global <specific command e.g branch, diff> <true, false or always>"},{"title":"Show all local branches ordered by recent commits","tip":"git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads/"},{"title":"Find lines matching the pattern (regex or string) in tracked files","tip":"git grep --heading --line-number 'foo bar'"},{"title":"Clone a shallow copy of a repository","tip":"git clone https://github.com/user/repo.git --depth 1"},{"title":"Search Commit log across all branches for given text","tip":"git log --all --grep='<given-text>'"},{"title":"Get first commit in a branch (from master)","tip":"git log --oneline master..<branch-name> | tail -1","alternatives":["git log --reverse master..<branch-name> | head -6"]},{"title":"Unstaging Staged file","tip":"git reset HEAD <file-name>"},{"title":"Force push to Remote Repository","tip":"git push -f <remote-name> <branch-name>"},{"title":"Adding Remote name","tip":"git remote add <remote-nickname> <remote-url>"},{"title":"List all currently configured remotes","tip":"git remote -v"},{"title":"Show the author, time and last revision made to each line of a given file","tip":"git blame <file-name>"},{"title":"Group commits by authors and title","tip":"git shortlog"},{"title":"Forced push but still ensure you don't overwrite other's work","tip":"git push --force-with-lease <remote-name> <branch-name>"},{"title":"Show how many lines does an author contribute","tip":"git log --author='_Your_Name_Here_' --pretty=tformat: --numstat | gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\n\", add, subs, loc }' -","alternatives":["git log --author='_Your_Name_Here_' --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s, removed lines: %s, total lines: %s\n\", add, subs, loc }' - # on Mac OSX"]},{"title":"Revert: Reverting an entire merge","tip":"git revert -m 1 <commit-ish>"},{"title":"Number of commits in a branch","tip":"git rev-list --count <branch-name>"},{"title":"Alias: git undo","tip":"git config --global alias.undo '!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f'"},{"title":"Add object notes","tip":"git notes add -m 'Note on the previous commit....'"},{"title":"Show all the git-notes","tip":"git log --show-notes='*'"},{"title":"Apply commit from another repository","tip":"git --git-dir=<source-dir>/.git format-patch -k -1 --stdout <SHA1> | git am -3 -k"},{"title":"Specific fetch reference","tip":"git fetch origin master:refs/remotes/origin/mymaster"},{"title":"Find common ancestor of two branches","tip":"git merge-base <branch-name> <other-branch-name>"},{"title":"List unpushed git commits","tip":"git log --branches --not --remotes","alternatives":["git log @{u}..","git cherry -v"]},{"title":"Add everything, but whitespace changes","tip":"git diff --ignore-all-space | git apply --cached"},{"title":"Edit [local/global] git config","tip":"git config [--global] --edit"},{"title":"blame on certain range","tip":"git blame -L <start>,<end>"},{"title":"Show a Git logical variable.","tip":"git var -l | <variable>"},{"title":"Preformatted patch file.","tip":"git format-patch -M upstream..topic"},{"title":"Get the repo name.","tip":"git rev-parse --show-toplevel"},{"title":"logs between date range","tip":"git log --since='FEB 1 2017' --until='FEB 14 2017'"},{"title":"Exclude author from logs","tip":"git log --perl-regexp --author='^((?!excluded-author-regex).*)$'"},{"title":"Generates a summary of pending changes","tip":"git request-pull v1.0 https://git.ko.xz/project master:for-linus"},{"title":"List references in a remote repository","tip":"git ls-remote git://git.kernel.org/pub/scm/git/git.git"},{"title":"Backup untracked files.","tip":"git ls-files --others -i --exclude-standard | xargs zip untracked.zip"},{"title":"List all git aliases","tip":"git config -l | grep alias | sed 's/^alias\\.//g'","alternatives":["git config -l | grep alias | cut -d '.' -f 2"]},{"title":"Show git status short","tip":"git status --short --branch"},{"title":"Checkout a commit prior to a day ago","tip":"git checkout master@{yesterday}"},{"title":"Push the current branch to the same name on the remote repository","tip":"git push origin HEAD"},{"title":"Push a new local branch to remote repository and track","tip":"git push -u origin <branch_name>"},{"title":"Change a branch base","tip":"git rebase --onto <new_base> <old_base>"},{"title":"Use SSH instead of HTTPs for remotes","tip":"git config --global url.'git@github.com:'.insteadOf 'https://github.com/'"},{"title":"Update a submodule to the latest commit","tip":"cd <path-to-submodule>\ngit pull origin <branch>\ncd <root-of-your-main-project>\ngit add <path-to-submodule>\ngit commit -m \"submodule updated\""},{"title":"Prevent auto replacing LF with CRLF","tip":"git config --global core.autocrlf false"}]`

	return string(myJson)
}

const HelpMockData string = " \"Everyday Git in twenty commands or so\" \n \"git help everyday\" \n\n \"Show helpful guides that come with Git\" \n \"git help -g\" \n\n \"Search change by content\" \n \"git log -S'<a term in the source>'\" \n\n \"Show changes over time for specific file\" \n \"git log -p <file_name>\" \n\n \"Remove sensitive data from history, after a push\" \n \"git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch <path-to-your-file>' --prune-empty --tag-name-filter cat -- --all && git push origin --force --all\" \n\n \"Sync with remote, overwrite local changes\" \n \"git fetch origin && git reset --hard origin/master && git clean -f -d\" \n\n \"List of all files till a commit\" \n \"git ls-tree --name-only -r <commit-ish>\" \n\n \"Git reset first commit\" \n \"git update-ref -d HEAD\" \n\n \"Reset: preserve uncommitted local changes\" \n \"git reset --keep <commit>\" \n\n \"List all the conflicted files\" \n \"git diff --name-only --diff-filter=U\" \n\n \"List of all files changed in a commit\" \n \"git diff-tree --no-commit-id --name-only -r <commit-ish>\" \n\n \"Unstaged changes since last commit\" \n \"git diff\" \n\n \"Changes staged for commit\" \n \"git diff --cached\" \n\n \"Show both staged and unstaged changes\" \n \"git diff HEAD\" \n\n \"List all branches that are already merged into master\" \n \"git branch --merged master\" \n\n \"Quickly switch to the previous branch\" \n \"git checkout -\" \n\n \"Remove branches that have already been merged with master\" \n \"git branch --merged master | grep -v '^\\\\*' | xargs -n 1 git branch -d\" \n\n \"List all branches and their upstreams, as well as last commit on branch\" \n \"git branch -vv\" \n\n \"Track upstream branch\" \n \"git branch -u origin/mybranch\" \n\n \"Delete local branch\" \n \"git branch -d <local_branchname>\" \n\n \"Delete remote branch\" \n \"git push origin --delete <remote_branchname>\" \n\n \"Create local tag\" \n \"git tag <tag-name>\" \n\n \"Delete local tag\" \n \"git tag -d <tag-name>\" \n\n \"Delete remote tag\" \n \"git push origin :refs/tags/<tag-name>\" \n\n \"Undo local changes with the last content in head\" \n \"git checkout -- <file_name>\" \n\n \"Revert: Undo a commit by creating a new commit\" \n \"git revert <commit-ish>\" \n\n \"Reset: Discard commits, advised for private branch\" \n \"git reset <commit-ish>\" \n\n \"Reword the previous commit message\" \n \"git commit -v --amend\" \n\n \"See commit history for just the current branch\" \n \"git cherry -v master\" \n\n \"Amend author.\" \n \"git commit --amend --author='Author Name <email@address.com>'\" \n\n \"Reset author, after author has been changed in the global config.\" \n \"git commit --amend --reset-author --no-edit\" \n\n \"Changing a remote's URL\" \n \"git remote set-url origin <URL>\" \n\n \"Get list of all remote references\" \n \"git remote\" \n\n \"Get list of all local and remote branches\" \n \"git branch -a\" \n\n \"Get only remote branches\" \n \"git branch -r\" \n\n \"Stage parts of a changed file, instead of the entire file\" \n \"git add -p\" \n\n \"Get git bash completion\" \n \"curl -L http://git.io/vfhol > ~/.git-completion.bash && echo '[ -f ~/.git-completion.bash ] && . ~/.git-completion.bash' >> ~/.bashrc\" \n\n \"What changed since two weeks?\" \n \"git log --no-merges --raw --since='2 weeks ago'\" \n\n \"See all commits made since forking from master\" \n \"git log --no-merges --stat --reverse master..\" \n\n \"Pick commits across branches using cherry-pick\" \n \"git checkout <branch-name> && git cherry-pick <commit-ish>\" \n\n \"Find out branches containing commit-hash\" \n \"git branch -a --contains <commit-ish>\" \n\n \"Git Aliases\" \n \"git config --global alias.<handle> <command> \\ngit config --global alias.st status\" \n\n \"Saving current state of tracked files without commiting\" \n \"git stash\" \n\n \"Saving current state of unstaged changes to tracked files\" \n \"git stash -k\" \n\n \"Saving current state including untracked files\" \n \"git stash -u\" \n\n \"Saving current state with message\" \n \"git stash push -m <message>\" \n\n \"Saving current state of all files (ignored, untracked, and tracked)\" \n \"git stash -a\" \n\n \"Show list of all saved stashes\" \n \"git stash list\" \n\n \"Show the contents of any stash in patch form\" \n \"git stash show -p <stash@{n}>\" \n\n \"Apply any stash without deleting from the stashed list\" \n \"git stash apply <stash@{n}>\" \n\n \"Apply last stashed state and delete it from stashed list\" \n \"git stash pop\" \n\n \"Delete all stored stashes\" \n \"git stash clear\" \n\n \"Grab a single file from a stash\" \n \"git checkout <stash@{n}> -- <file_path>\" \n\n \"Show all tracked files\" \n \"git ls-files -t\" \n\n \"Show all untracked files\" \n \"git ls-files --others\" \n\n \"Show all ignored files\" \n \"git ls-files --others -i --exclude-standard\" \n\n \"Create new working tree from a repository (git 2.5)\" \n \"git worktree add -b <branch-name> <path> <start-point>\" \n\n \"Create new working tree from HEAD state\" \n \"git worktree add --detach <path> HEAD\" \n\n \"Untrack files without deleting\" \n \"git rm --cached <file_path>\" \n\n \"Before deleting untracked files/directory, do a dry run to get the list of these files/directories\" \n \"git clean -n\" \n\n \"Forcefully remove untracked files\" \n \"git clean -f\" \n\n \"Forcefully remove untracked directory\" \n \"git clean -f -d\" \n\n \"Update all the submodules\" \n \"git submodule foreach git pull\" \n\n \"Show all commits in the current branch yet to be merged to master\" \n \"git cherry -v master\" \n\n \"Rename a branch\" \n \"git branch -m <new-branch-name>\" \n\n \"Rebases 'feature' to 'master' and merges it in to master \" \n \"git rebase master feature && git checkout master && git merge -\" \n\n \"Archive the master branch\" \n \"git archive master --format=zip --output=master.zip\" \n\n \"Modify previous commit without modifying the commit message\" \n \"git add --all && git commit --amend --no-edit\" \n\n \"Prunes references to remove branches that have been deleted in the remote.\" \n \"git fetch -p\" \n\n \"Delete local branches that has been squash and merged in the remote.\" \n \"git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -D\" \n\n \"Retrieve the commit hash of the initial revision.\" \n \" git rev-list --reverse HEAD | head -1\" \n\n \"Visualize the version tree.\" \n \"git log --pretty=oneline --graph --decorate --all\" \n\n \"Visualize the tree including commits that are only referenced from reflogs\" \n \"git log --graph --decorate --oneline $(git rev-list --walk-reflogs --all)\" \n\n \"Deploying git tracked subfolder to gh-pages\" \n \"git subtree push --prefix subfolder_name origin gh-pages\" \n\n \"Adding a project to repo using subtree\" \n \"git subtree add --prefix=<directory_name>/<project_name> --squash git@github.com:<username>/<project_name>.git master\" \n\n \"Get latest changes in your repo for a linked project using subtree\" \n \"git subtree pull --prefix=<directory_name>/<project_name> --squash git@github.com:<username>/<project_name>.git master\" \n\n \"Export a branch with history to a file.\" \n \"git bundle create <file> <branch-name>\" \n\n \"Import from a bundle\" \n \"git clone repo.bundle <repo-dir> -b <branch-name>\" \n\n \"Get the name of current branch.\" \n \"git rev-parse --abbrev-ref HEAD\" \n\n \"Ignore one file on commit (e.g. Changelog).\" \n \"git update-index --assume-unchanged Changelog; git commit -a; git update-index --no-assume-unchanged Changelog\" \n\n \"Stash changes before rebasing\" \n \"git rebase --autostash\" \n\n \"Fetch pull request by ID to a local branch\" \n \"git fetch origin pull/<id>/head:<branch-name>\" \n\n \"Show the most recent tag on the current branch.\" \n \"git describe --tags --abbrev=0\" \n\n \"Show inline word diff.\" \n \"git diff --word-diff\" \n\n \"Show changes using common diff tools.\" \n \"git difftool [-t <tool>] <commit1> <commit2> <path>\" \n\n \"Don’t consider changes for tracked file.\" \n \"git update-index --assume-unchanged <file_name>\" \n\n \"Undo assume-unchanged.\" \n \"git update-index --no-assume-unchanged <file_name>\" \n\n \"Clean the files from .gitignore.\" \n \"git clean -X -f\" \n\n \"Restore deleted file.\" \n \"git checkout <deleting_commit> -- <file_path>\" \n\n \"Restore file to a specific commit-hash\" \n \"git checkout <commit-ish> -- <file_path>\" \n\n \"Always rebase instead of merge on pull.\" \n \"git config --global pull.rebase true\" \n\n \"List all the alias and configs.\" \n \"git config --list\" \n\n \"Make git case sensitive.\" \n \"git config --global core.ignorecase false\" \n\n \"Add custom editors.\" \n \"git config --global core.editor '$EDITOR'\" \n\n \"Auto correct typos.\" \n \"git config --global help.autocorrect 1\" \n\n \"Check if the change was a part of a release.\" \n \"git name-rev --name-only <SHA-1>\" \n\n \"Dry run. (any command that supports dry-run flag should do.)\" \n \"git clean -fd --dry-run\" \n\n \"Marks your commit as a fix of a previous commit.\" \n \"git commit --fixup <SHA-1>\" \n\n \"Squash fixup commits normal commits.\" \n \"git rebase -i --autosquash\" \n\n \"Skip staging area during commit.\" \n \"git commit --only <file_path>\" \n\n \"Interactive staging.\" \n \"git add -i\" \n\n \"List ignored files.\" \n \"git check-ignore *\" \n\n \"Status of ignored files.\" \n \"git status --ignored\" \n\n \"Commits in Branch1 that are not in Branch2\" \n \"git log Branch1 ^Branch2\" \n\n \"List n last commits\" \n \"git log -<n>\" \n\n \"Reuse recorded resolution, record and reuse previous conflicts resolutions.\" \n \"git config --global rerere.enabled 1\" \n\n \"Open all conflicted files in an editor.\" \n \"git diff --name-only | uniq | xargs $EDITOR\" \n\n \"Count unpacked number of objects and their disk consumption.\" \n \"git count-objects --human-readable\" \n\n \"Prune all unreachable objects from the object database.\" \n \"git gc --prune=now --aggressive\" \n\n \"Instantly browse your working repository in gitweb.\" \n \"git instaweb [--local] [--httpd=<httpd>] [--port=<port>] [--browser=<browser>]\" \n\n \"View the GPG signatures in the commit log\" \n \"git log --show-signature\" \n\n \"Remove entry in the global config.\" \n \"git config --global --unset <entry-name>\" \n\n \"Checkout a new branch without any history\" \n \"git checkout --orphan <branch_name>\" \n\n \"Extract file from another branch.\" \n \"git show <branch_name>:<file_name>\" \n\n \"List only the root and merge commits.\" \n \"git log --first-parent\" \n\n \"Change previous two commits with an interactive rebase.\" \n \"git rebase --interactive HEAD~2\" \n\n \"List all branch is WIP\" \n \"git checkout master && git branch --no-merged\" \n\n \"Find guilty with binary search\" \n \"git bisect start                    # Search start \\ngit bisect bad                      # Set point to bad commit \\ngit bisect good v2.6.13-rc2         # Set point to good commit|tag \\ngit bisect bad                      # Say current state is bad \\ngit bisect good                     # Say current state is good \\ngit bisect reset                    # Finish search \\n\" \n\n \"Bypass pre-commit and commit-msg githooks\" \n \"git commit --no-verify\" \n\n \"List commits and changes to a specific file (even through renaming)\" \n \"git log --follow -p -- <file_path>\" \n\n \"Clone a single branch\" \n \"git clone -b <branch-name> --single-branch https://github.com/user/repo.git\" \n\n \"Create and switch new branch\" \n \"git checkout -b <branch-name>\" \n\n \"Ignore file mode changes on commits\" \n \"git config core.fileMode false\" \n\n \"Turn off git colored terminal output\" \n \"git config --global color.ui false\" \n\n \"Specific color settings\" \n \"git config --global <specific command e.g branch, diff> <true, false or always>\" \n\n \"Show all local branches ordered by recent commits\" \n \"git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads/\" \n\n \"Find lines matching the pattern (regex or string) in tracked files\" \n \"git grep --heading --line-number 'foo bar'\" \n\n \"Clone a shallow copy of a repository\" \n \"git clone https://github.com/user/repo.git --depth 1\" \n\n \"Search Commit log across all branches for given text\" \n \"git log --all --grep='<given-text>'\" \n\n \"Get first commit in a branch (from master)\" \n \"git log --oneline master..<branch-name> | tail -1\" \n\n \"Unstaging Staged file\" \n \"git reset HEAD <file-name>\" \n\n \"Force push to Remote Repository\" \n \"git push -f <remote-name> <branch-name>\" \n\n \"Adding Remote name\" \n \"git remote add <remote-nickname> <remote-url>\" \n\n \"List all currently configured remotes\" \n \"git remote -v\" \n\n \"Show the author, time and last revision made to each line of a given file\" \n \"git blame <file-name>\" \n\n \"Group commits by authors and title\" \n \"git shortlog\" \n\n \"Forced push but still ensure you don't overwrite other's work\" \n \"git push --force-with-lease <remote-name> <branch-name>\" \n\n \"Show how many lines does an author contribute\" \n \"git log --author='_Your_Name_Here_' --pretty=tformat: --numstat | gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \\\"added lines: %s removed lines: %s total lines: %s\\n\\\", add, subs, loc }' -\" \n\n \"Revert: Reverting an entire merge\" \n \"git revert -m 1 <commit-ish>\" \n\n \"Number of commits in a branch\" \n \"git rev-list --count <branch-name>\" \n\n \"Alias: git undo\" \n \"git config --global alias.undo '!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f'\" \n\n \"Add object notes\" \n \"git notes add -m 'Note on the previous commit....'\" \n\n \"Show all the git-notes\" \n \"git log --show-notes='*'\" \n\n \"Apply commit from another repository\" \n \"git --git-dir=<source-dir>/.git format-patch -k -1 --stdout <SHA1> | git am -3 -k\" \n\n \"Specific fetch reference\" \n \"git fetch origin master:refs/remotes/origin/mymaster\" \n\n \"Find common ancestor of two branches\" \n \"git merge-base <branch-name> <other-branch-name>\" \n\n \"List unpushed git commits\" \n \"git log --branches --not --remotes\" \n\n \"Add everything, but whitespace changes\" \n \"git diff --ignore-all-space | git apply --cached\" \n\n \"Edit [local/global] git config\" \n \"git config [--global] --edit\" \n\n \"blame on certain range\" \n \"git blame -L <start>,<end>\" \n\n \"Show a Git logical variable.\" \n \"git var -l | <variable>\" \n\n \"Preformatted patch file.\" \n \"git format-patch -M upstream..topic\" \n\n \"Get the repo name.\" \n \"git rev-parse --show-toplevel\" \n\n \"logs between date range\" \n \"git log --since='FEB 1 2017' --until='FEB 14 2017'\" \n\n \"Exclude author from logs\" \n \"git log --perl-regexp --author='^((?!excluded-author-regex).*)$'\" \n\n \"Generates a summary of pending changes\" \n \"git request-pull v1.0 https://git.ko.xz/project master:for-linus\" \n\n \"List references in a remote repository\" \n \"git ls-remote git://git.kernel.org/pub/scm/git/git.git\" \n\n \"Backup untracked files.\" \n \"git ls-files --others -i --exclude-standard | xargs zip untracked.zip\" \n\n \"List all git aliases\" \n \"git config -l | grep alias | sed 's/^alias\\\\.//g'\" \n\n \"Show git status short\" \n \"git status --short --branch\" \n\n \"Checkout a commit prior to a day ago\" \n \"git checkout master@{yesterday}\" \n\n \"Push the current branch to the same name on the remote repository\" \n \"git push origin HEAD\" \n\n \"Push a new local branch to remote repository and track\" \n \"git push -u origin <branch_name>\" \n\n \"Change a branch base\" \n \"git rebase --onto <new_base> <old_base>\" \n\n \"Use SSH instead of HTTPs for remotes\" \n \"git config --global url.'git@github.com:'.insteadOf 'https://github.com/'\" \n\n \"Update a submodule to the latest commit\" \n \"cd <path-to-submodule>\\ngit pull origin <branch>\\ncd <root-of-your-main-project>\\ngit add <path-to-submodule>\\ngit commit -m \\\"submodule updated\\\"\" \n\n \"Prevent auto replacing LF with CRLF\" \n \"git config --global core.autocrlf false\" \n\n"
